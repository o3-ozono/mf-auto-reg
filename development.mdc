\
---
description: Detailed development workflow and coding guidelines
globs: "**/*.ts,**/*.js,**/*.tsx,**/*.jsx"
alwaysApply: true
---

# Development Workflow & Coding Guidelines

## Testing Strategy

- **Overall Goal**: Ensure code correctness, prevent regressions, and cover critical paths.
- **Unit Tests**: Use Jest for unit testing nodes and utilities (`tests/nodes/`, `tests/utils/`).
  - Focus on isolated component logic.
  - Mock external dependencies (API calls, database) extensively **or use local emulators (e.g., Miniflare for D1)**.
  - Aim for high code coverage for core logic (refer to `basic.mdc` for target).
- **Integration Tests**: Test the interaction between specific code components and actual external third-party systems (`tests/integration/`).
  - Example: Verify that `D1Client` correctly interacts with a real Cloudflare D1 database instance.
  - These tests are independent of specific workflow node logic.
  - May involve setting up dedicated test resources in the external system.
- **End-to-End (E2E) Tests**: Mandatory for all user-facing features (`tests/e2e/`).
  - Implement using Playwright.
  - Cover the *entire* system flow, often involving UI interactions (e.g., from email detection to MoneyForward registration).
  - Use real services with dedicated test accounts where feasible.
  - Test critical paths, common user flows, and essential error handling.
- **Environment & Data**: All test environments must be isolated. Ensure proper test data setup and cleanup after runs.
- **Coverage**: While aiming for the target in `basic.mdc`, prioritize testing critical and complex parts of the application.
- **Agent Evaluation**: Utilize the `@mastra/evals` package for evaluating LLM agent performance where applicable.
  - Consider metrics like relevancy, completeness, and tone consistency.
  - Integrate evaluation steps into the testing pipeline for agents built with Mastra. 