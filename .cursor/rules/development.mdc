---
description: 
globs: 
alwaysApply: true
---
---
description: Detailed development workflow and coding guidelines
globs: "**/*.ts,**/*.js,**/*.tsx,**/*.jsx"
alwaysApply: true
---

# Development Workflow & Coding Guidelines

## Development Environment Setup

- Node.js 22 or higher required
- Use npm for package management
- Setup local environment with `.env` file based on the template
- For local development, run Playwright MCP separately with:
  ```bash
  npx @playwright/mcp@latest
  ```

## TypeScript Guidelines

- Use strict type checking mode
- Define interfaces for all data structures
- Use type guards for runtime type checking
- Prefer functional programming patterns where appropriate
- Use async/await for asynchronous operations

## Error Handling

- Use try/catch blocks in all async functions
- Log errors with appropriate context
- Propagate errors to the Mastra engine where appropriate
- Implement node-specific error recovery when possible

## Testing Strategy

- **Overall Goal**: Ensure code correctness, prevent regressions, and cover critical paths.
- **Unit Tests**: Use Jest for unit testing nodes and utilities (`tests/nodes/`, `tests/utils/`).
  - Focus on isolated component logic.
  - Mock external dependencies (API calls, database) extensively.
  - Aim for high code coverage for core logic (refer to `basic.mdc` for target).
- **Integration Tests**: Test interactions between nodes within workflows (`tests/workflows/`).
  - Verify data flow and node connections.
  - May involve mocking external systems but focus on internal integration.
- **End-to-End (E2E) Tests**: Mandatory for all user-facing features (`tests/e2e/`).
  - Implement using Playwright.
  - Cover the *entire* workflow (e.g., email detection to MoneyForward registration).
  - Use real services with dedicated test accounts where feasible.
  - Test critical paths, common user flows, and essential error handling.
- **Environment & Data**: All test environments must be isolated. Ensure proper test data setup and cleanup after runs.
- **Coverage**: While aiming for the target in `basic.mdc`, prioritize testing critical and complex parts of the application.
- **Agent Evaluation**: Utilize the `@mastra/evals` package for evaluating LLM agent performance where applicable.
  - Consider metrics like relevancy, completeness, and tone consistency.
  - Integrate evaluation steps into the testing pipeline for agents built with Mastra.

## Documentation Guidelines

- **TSDoc**: Use TSDoc comments for *all* exported functions, classes, interfaces, and types. Explain purpose, parameters, and return values.
- **Workflow Documentation**: Maintain clear descriptions and diagrams for workflows in the `docs/` directory.
- **API Documentation**: Document any internal or external API endpoints, including request/response formats and authentication.
- **Project Documentation**: Keep `README.md` (overview, setup, usage) and `architecture.md` (high-level design) up-to-date.
- **Clarity and Accuracy**: Ensure all documentation is clear, concise, and accurately reflects the current state of the code.

## Code Review Process

- Refer to `code-review.mdc` for the detailed code review process and checklist.
- All PRs require at least one approval before merging.
- CI checks (linting, tests) must pass.