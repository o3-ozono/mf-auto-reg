---
description: 
globs: 
alwaysApply: true
---
---
description: Development rules for mf-auto-reg project
globs: "**/*"
alwaysApply: true
---

# mf-auto-reg Development Rules

## Code Style & Structure

- **TypeScript**: Use TypeScript for all JavaScript code
- **Linting**: Follow ESLint and Prettier configurations strictly
- **Formatting**: Ensure code is automatically formatted on save (using Prettier)
- **Newline**: Ensure all files end with a single newline character
- **Documentation**: Basic documentation standards (refer to `development.mdc` for details like TSDoc)

## Project Architecture

- Follow the Mastra framework architecture
- Implement custom nodes by extending the Node class
- Use declarative workflow definitions in YAML files

## Development Workflow

- **Issue Tracking**: Before starting any development work (new feature, bug fix, refactoring), create a GitHub Issue to track the task. If the task involves significant design decisions, create a **Design Doc** markdown file in `docs/design/` (e.g., `docs/design/XXX-short-description.md`) outlining the plan and link it from the GitHub Issue.
- **Branching**: 
    - Create feature branches from `main`: `feature/short-description` (link to the issue)
    - Create bugfix branches: `fix/issue-description` (link to the issue)
- **Commits**: Use Conventional Commits standard for *all* commit messages:
    - `feat:` New feature for the user
    - `fix:` Bug fix for the user
    - `docs:` Documentation changes only
    - `style:` Formatting, missing semi-colons, etc; no code change
    - `refactor:` Refactoring production code
    - `test:` Adding missing tests, refactoring tests; no production code change
    - `chore:` Updating build tasks, package manager configs, etc; no production code change
    - Use scope (e.g., `feat(node): ...`) and body/footer where appropriate
- **Pull Requests**: 
    - Create Pull Requests using the GitHub CLI: `gh pr create`.
    - Link the PR to the corresponding GitHub Issue using keywords like `Closes #issue-number`, `Fixes #issue-number`, or `Resolves #issue-number` in the PR description.
    - Follow detailed guidelines in `code-review.mdc`